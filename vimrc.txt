set nocompatible
filetype off

set rtp+=~/.vim/bundle/Vundle.vim

call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'kien/ctrlp.vim'
" Plugin 'ervandew/supertab'

" Colors
Plugin 'altercation/vim-colors-solarized'
Plugin 'danilo-augusto/vim-afterglow' "Sublime-type feel
Plugin 'jnurmine/Zenburn' " for terminal
Plugin 'gregsexton/Atom' " dark atom theme
Plugin 'ajh17/Spacegray.vim' " dark gray theme
Plugin 'jdsimcoe/abstract.vim'
Plugin 'drewtempelmeyer/palenight.vim'
Plugin 'KeitaNakamura/neodark.vim'

" Small functionality changes
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-unimpaired'
Plugin 'godlygeek/tabular'
Plugin 'tommcdo/vim-exchange'
Plugin 'vim-scripts/repmo.vim'
Plugin 'terryma/vim-smooth-scroll'

" Big features
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'Valloric/YouCompleteMe'
Plugin 'scrooloose/nerdtree'
Plugin 'vim-syntastic/syntastic'
Plugin 'mileszs/ack.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-rhubarb'

" Web dev
Plugin 'alvan/vim-closetag'
Plugin 'pangloss/vim-javascript'
Plugin 'mxw/vim-jsx'
Plugin 'leafgarland/typescript-vim'
Plugin 'peitalin/vim-jsx-typescript'
Plugin 'mattn/emmet-vim'

" Jupyter
Plugin 'goerz/jupytext.vim'

call vundle#end()

" Jupytext
let g:jupytext_fmt = 'py'

" for web dev
let g:closetag_filenames = "*.html,*.js,*.md,*.tsx"
let g:closetag_filetypes = 'html,jsx'

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 1
let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_tex_checkers = [] " don't syntax check TeX
let g:syntastic_python_checkers = [] " don't check Python
let g:syntastic_javascript_eslint_exe = 'npm run lint --'
let g:syntastic_python_exec = '/anaconda/envs/py36/'
let g:syntastic_quiet_messages = {"regex": [
\    ".*Missing module docstring",
\    ".*Too many arguments"]}
let g:syntastic_enable_python_checker = 0

" ack
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

" for markdown rendering
let vim_markdown_preview_hotkey='<C-m>'

" necessary for YouCompleteMe
let g:ycm_python_interpreter_path = '/anaconda/envs/py36/bin/'
let g:ycm_filetype_blacklist = {}
let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'

" necessary for nerdtree
map <C-n> :NERDTreeToggle<CR>

" necessary for vim-latex installation
filetype plugin on
set shellslash
set grepprg=grep\ -nH\ $*
let g:tex_flavor='latex'
let g:Tex_DefaultTargetFormat='pdf'
let g:Tex_ViewRule_pdf = '/Applications/Preview.app'


" functionality
set expandtab " indents become spaces
set autoindent " line indent propagated to new line
set number " show numbering
set hlsearch " highlight search results
set colorcolumn=81 " show the 81st column visually
syntax on " highlight syntax
set incsearch " incremental search
set wildmenu
set wildmode=longest,list
set wildignore+=*.aux,*.log,*.jpg,*.png,.DS_Store,.git,*.swp,*.tmp
:imap jj <Esc>
:nmap <C-f> gqip
:nmap <C-a> :%y*<CR>

" navigation
" nnoremap j gj " move vertically by visual line
" nnoremap k gk
" smooth scrolling
noremap <silent> <c-u> :call smooth_scroll#up(&scroll, 0, 2)<CR>
noremap <silent> <c-d> :call smooth_scroll#down(&scroll, 0, 2)<CR>

" multiple windows
set splitbelow
set splitright
nnoremap <c-k> <c-w>k
nnoremap <c-l> <c-w>l
nnoremap <c-h> <c-w>h


" CtrlP
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_custom_ignore = '\v[\/](\.git|\.hg|\.svn|node_modules|public)$'

" Transparent mode
function! Transparent()
  set transparency=40
  set guioptions=
  colorscheme abstract
endfunction
command! -register Transparent call Transparent()

function! NoTransparent()
  set transparency=0
  set guioptions=r
 endfunction
 command! -register NoTransparent call NoTransparent()


" Aesthetics of display
if has("gui_running")
  if has("gui_macvim")
    set guifont=Menlo\ Regular:h12
    colorscheme solarized
  endif
  else
    colorscheme zenburn
endif

" JSX syntax highlighting
" dark red
hi tsxTagName guifg=#E06C75

" orange
hi tsxCloseString guifg=#F99575
hi tsxCloseTag guifg=#F99575
hi tsxAttributeBraces guifg=#F99575
hi tsxEqual guifg=#F99575

" yellow
hi tsxAttrib guifg=#F8BD7F cterm=italic

hi ReactState guifg=#C176A7
hi ReactProps guifg=#D19A66
hi Events ctermfg=204 guifg=#56B6C2
hi ReduxKeywords ctermfg=204 guifg=#C678DD
hi WebBrowser ctermfg=204 guifg=#56B6C2
hi ReactLifeCycleMethods ctermfg=204 guifg=#D19A66

function! CopyMatches(reg)
  let hits = []
  %s//\=len(add(hits, submatch(0))) ? submatch(0) : ''/gne
  let reg = empty(a:reg) ? '+' : a:reg
  execute 'let @'.reg.' = join(hits, "\n") . "\n"'
endfunction
command! -register CopyMatches call CopyMatches(<q-reg>)

function! s:DiffWithSaved()
  let filetype=&ft
  diffthis
  vnew | r # | normal! 1Gdd
  diffthis
  exe "setlocal bt=nofile bh=wipe nobl noswf ro ft=" . filetype
endfunction
com! DiffSaved call s:DiffWithSaved()

augroup myvimrchooks
  au!
  autocmd bufwritepost .vimrc source ~/.vimrc
augroup END

" allow local .vimrc for each project
set exrc
set secure
